{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QNote that the types bundle format is slightly different from that of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q A path to a local file or a Postgres-compatible connection string\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (optional) The block height to start.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qto update the version.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a squid NAME squid name (optional)-d, --description description-l, --logo logo url -w, --website website url\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Kill a squid or a squid version \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q squid \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Squid or versions list -n, --name= squid name-t, --truncate truncate data in columns (false by default)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a version NAMEANDVERSION squid name and version name@version-d, --description= description -s, --source= git URL of the source code\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Getting logs about version NAMEANDVERSION squid name and version name@version-c, --container output logs only from a specific squid component (processor\\|query-node\\|db-migrate)-f, --follow continue streaming new logs-l, --level set logs level (error\\|debug\\|info\\|warning)-p, --pageSize set logs page size (default: 50)--since logs start date (default: 1d)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Update a version image NAMEANDVERSION squid name and versionname@version-r, --hardReset perform a hard reset (db wipeout) -s, --source= git URL of the source code\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a squid NAME squid name (optional)-d, --description description-l, --logo logo url -w, --website website URL\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Kill a squid or a squid version \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q squid \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Squid or versions list -n, --name= squid name-t, --truncate truncate data in columns (false by default)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a version NAMEANDVERSION squid name and version name@version-d, --description= description -s, --source= git URL of the source code\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Getting logs about version NAMEANDVERSION squid name and version name@version-c, --container output logs only from a specific squid component (processor\\|query-node\\|db-migrate)-f, --follow continue streaming new logs-l, --level set logs level (error\\|debug\\|info\\|warning)-p, --pageSize set logs page size (default: 50)--since logs start date (default: 1d)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Update a version image NAMEANDVERSION squid name and versionname@version-r, --hardReset perform a hard reset (db wipeout) -s, --source= git URL of the source code\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a squid NAME squid name (optional)-d, --description description-l, --logo logo url -w, --website website URL\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Kill a squid or a squid version \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q squid \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Squid or versions list -n, --name= squid name-t, --truncate truncate data in columns (false by default)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a version NAMEANDVERSION squid name and version name@version-d, --description= description -s, --source= git URL of the source code\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Getting logs about version NAMEANDVERSION squid name and version name@version-c, --container output logs only from a specific squid component (processor\\|query-node\\|db-migrate)-f, --follow continue streaming new logs-l, --level set logs level (error\\|debug\\|info\\|warning)-p, --pageSize set logs page size (default: 50)--since logs start date (default: 1d)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Update a version image NAMEANDVERSION squid name and versionname@version-r, --hardReset perform a hard reset (db wipe out) -s, --source= git URL of the source code\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a squid NAME squid name (optional)-d, --description description-l, --logo logo URL -w, --website website URL\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Kill a squid or a squid version \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q squid \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Squid or versions list -n, --name= squid name-t, --truncate truncate data in columns (false by default)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Create a version NAMEANDVERSION squid name and version name@version-d, --description= description -s, --source= git URL of the source code\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Getting logs about version NAMEANDVERSION squid name and version name@version-c, --container output logs only from a specific squid component (processor\\|query-node\\|db-migrate)-f, --follow continue streaming new logs-l, --level set logs level (error\\|debug\\|info\\|warning)-p, --pageSize set logs page size (default: 50)--since logs start date (default: 1d)\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Update a version image NAMEANDVERSION squid name and versionname@version-r, --hardReset perform a hard reset (db wipe out) -s, --source= git URL of the source code\\E$"}
{"rule":"INTERESTED_BY","sentence":"^\\QThe processor subscribes to the log items of interest by defining data handlers.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q:::info If contract address(-es) supplied to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are stored in any wide-scope variables, it is recommended to convert them to flat lower case.\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\QEthereum Mainnet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nEthereum Goerli Testnet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nPolygon \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nPolygon Mumbai Testnet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nAvalanche C-Chain \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nFantom \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nExosama Network \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nBinance Chain \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nBinance Chain Testnet \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nSKALE Calypso NFT Hub \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nSKALE Calypso (stage) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nBOBA Ethereum \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nBOBA Moonbeam \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nArbitrum One   \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (*)\nOptimism Coming Soon\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QFull code is available in the examples repo.\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QTypes bundle can be specified in three different ways:\nas a name of a known chain\nas a name of a JSON file structured as a types bundle\nas a types bundle object\\E$"}
{"rule":"MISSING_GENITIVE","sentence":"^\\QPostgres metrics will be available in the future Aquarium releases.\\E$"}
